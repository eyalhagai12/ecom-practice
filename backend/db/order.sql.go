// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO "order" (id, total_price) VALUES ($1, $2) RETURNING id, created_at, updated_at, status, total_price
`

func (q *Queries) CreateOrder(ctx context.Context, iD uuid.UUID, totalPrice float64) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, iD, totalPrice)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.TotalPrice,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_item (order_id, product_id, quantity) VALUES ($1, $2, $3) RETURNING id, order_id, product_id, quantity, created_at, updated_at
`

func (q *Queries) CreateOrderItem(ctx context.Context, orderID uuid.UUID, productID uuid.UUID, quantity int32) (OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem, orderID, productID, quantity)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :one
UPDATE "order" SET status = "cancelled" WHERE id = $1 RETURNING id, created_at, updated_at, status, total_price
`

func (q *Queries) DeleteOrder(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, deleteOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.TotalPrice,
	)
	return i, err
}

const getOrderByUUID = `-- name: GetOrderByUUID :many
SELECT o.id, o.created_at, o.updated_at, o.status, o.total_price, oi.id, oi.order_id, oi.product_id, oi.quantity, oi.created_at, oi.updated_at 
FROM "order" as o
    JOIN order_item oi ON oi.order_id = o.id
WHERE o.id = $1
`

type GetOrderByUUIDRow struct {
	Order     Order     `json:"order"`
	OrderItem OrderItem `json:"orderItem"`
}

func (q *Queries) GetOrderByUUID(ctx context.Context, id uuid.UUID) ([]GetOrderByUUIDRow, error) {
	rows, err := q.db.Query(ctx, getOrderByUUID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderByUUIDRow
	for rows.Next() {
		var i GetOrderByUUIDRow
		if err := rows.Scan(
			&i.Order.ID,
			&i.Order.CreatedAt,
			&i.Order.UpdatedAt,
			&i.Order.Status,
			&i.Order.TotalPrice,
			&i.OrderItem.ID,
			&i.OrderItem.OrderID,
			&i.OrderItem.ProductID,
			&i.OrderItem.Quantity,
			&i.OrderItem.CreatedAt,
			&i.OrderItem.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrders = `-- name: GetOrders :many
SELECT id, created_at, updated_at, status, total_price FROM "order"
`

func (q *Queries) GetOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.TotalPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE "order" SET status = $2 WHERE id = $1 RETURNING id, created_at, updated_at, status, total_price
`

func (q *Queries) UpdateOrderStatus(ctx context.Context, iD uuid.UUID, status OrderStatus) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, iD, status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.TotalPrice,
	)
	return i, err
}
