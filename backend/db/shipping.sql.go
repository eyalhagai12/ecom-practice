// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: shipping.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createShippingProcess = `-- name: CreateShippingProcess :one
INSERT INTO shipping (id, order_id) VALUES ($1, $2) RETURNING id, status, order_id, created_at, updated_at, deleted_at
`

func (q *Queries) CreateShippingProcess(ctx context.Context, iD uuid.UUID, orderID uuid.UUID) (Shipping, error) {
	row := q.db.QueryRow(ctx, createShippingProcess, iD, orderID)
	var i Shipping
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.OrderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteShipping = `-- name: DeleteShipping :one
UPDATE shipping SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1 RETURNING id, status, order_id, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteShipping(ctx context.Context, id uuid.UUID) (Shipping, error) {
	row := q.db.QueryRow(ctx, deleteShipping, id)
	var i Shipping
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.OrderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getShippingByOrderId = `-- name: GetShippingByOrderId :one
SELECT id, status, order_id, created_at, updated_at, deleted_at FROM shipping WHERE order_id = $1
`

func (q *Queries) GetShippingByOrderId(ctx context.Context, orderID uuid.UUID) (Shipping, error) {
	row := q.db.QueryRow(ctx, getShippingByOrderId, orderID)
	var i Shipping
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.OrderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getShippingByUUID = `-- name: GetShippingByUUID :one
SELECT id, status, order_id, created_at, updated_at, deleted_at FROM shipping WHERE id = $1
`

func (q *Queries) GetShippingByUUID(ctx context.Context, id uuid.UUID) (Shipping, error) {
	row := q.db.QueryRow(ctx, getShippingByUUID, id)
	var i Shipping
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.OrderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateShippingStatus = `-- name: UpdateShippingStatus :one
UPDATE shipping SET status = $2 WHERE id = $1 RETURNING id, status, order_id, created_at, updated_at, deleted_at
`

func (q *Queries) UpdateShippingStatus(ctx context.Context, iD uuid.UUID, status ShippingStatus) (Shipping, error) {
	row := q.db.QueryRow(ctx, updateShippingStatus, iD, status)
	var i Shipping
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.OrderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
