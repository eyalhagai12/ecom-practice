// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (id, name, price, store_id) VALUES ($1, $2, $3, $4) RETURNING id, name, price, quantity, created_at, updated_at, deleted_at, store_id
`

func (q *Queries) CreateProduct(ctx context.Context, iD uuid.UUID, name string, price float64, storeID uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		iD,
		name,
		price,
		storeID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.StoreID,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :one
UPDATE product SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1 RETURNING id, name, price, quantity, created_at, updated_at, deleted_at, store_id
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, deleteProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.StoreID,
	)
	return i, err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, price, quantity, created_at, updated_at, deleted_at, store_id FROM product WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.StoreID,
	)
	return i, err
}

const getStoreProducts = `-- name: GetStoreProducts :many
SELECT id, name, price, quantity, created_at, updated_at, deleted_at, store_id FROM product WHERE store_id = $1
`

func (q *Queries) GetStoreProducts(ctx context.Context, storeID uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, getStoreProducts, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.StoreID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const increaseProductQuantity = `-- name: IncreaseProductQuantity :exec
UPDATE product SET quantity = quantity + $2 WHERE id = $1
`

func (q *Queries) IncreaseProductQuantity(ctx context.Context, iD uuid.UUID, quantity *int32) error {
	_, err := q.db.Exec(ctx, increaseProductQuantity, iD, quantity)
	return err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE product SET name = $2, price = $3 WHERE id = $1 RETURNING id, name, price, quantity, created_at, updated_at, deleted_at, store_id
`

func (q *Queries) UpdateProduct(ctx context.Context, iD uuid.UUID, name string, price float64) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct, iD, name, price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.StoreID,
	)
	return i, err
}
